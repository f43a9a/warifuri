name: Auto-merge warifuri workflows

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check for auto-merge'
        required: true
        type: number

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  validate-warifuri:
    name: Validate warifuri workspace
    runs-on: ubuntu-latest
    outputs:
      has-auto-merge: ${{ steps.check-auto-merge.outputs.has-auto-merge }}
      validation-passed: ${{ steps.validate.outputs.passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install warifuri
      run: poetry install --no-interaction

    - name: Check poetry.lock synchronization
      run: |
        echo "Checking if poetry.lock is synchronized with pyproject.toml..."
        if ! poetry check --lock; then
          echo "‚ö†Ô∏è  poetry.lock is out of sync with pyproject.toml"
          echo "This could cause dependency resolution issues"
          echo "Consider running 'poetry lock' locally and committing the changes"
          exit 1
        else
          echo "‚úÖ poetry.lock is synchronized with pyproject.toml"
        fi

    - name: Check for auto_merge.yaml files
      id: check-auto-merge
      run: |
        echo "Checking for auto_merge.yaml files in workspace..."
        auto_merge_files=$(find workspace/ -name "auto_merge.yaml" -o -name "auto_merge.yml" 2>/dev/null || true)
        if [ -n "$auto_merge_files" ]; then
          echo "has-auto-merge=true" >> $GITHUB_OUTPUT
          echo "Found auto_merge files:"
          echo "$auto_merge_files"
        else
          echo "has-auto-merge=false" >> $GITHUB_OUTPUT
          echo "No auto_merge.yaml files found"
        fi

    - name: Run warifuri validate
      id: validate
      run: |
        echo "Running warifuri validate..."
        echo "Current working directory: $(pwd)"
        echo "Available directories:"
        ls -la
        echo "Testing warifuri command:"
        poetry run warifuri --help | head -5
        echo "Running validation:"
        if poetry run warifuri validate 2>&1 | tee validate_output.txt; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ warifuri validation passed"
          echo "Validation output file created:"
          ls -la validate_output.txt
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "‚ùå warifuri validation failed"
          echo "Validation output:"
          cat validate_output.txt
          echo "Validation output file info:"
          ls -la validate_output.txt
          exit 1
        fi

    - name: Run tests
      run: |
        echo "Running test suite..."
        echo "Current working directory: $(pwd)"
        poetry run pytest tests/ -v --tb=short | tee pytest.log
        echo "Test execution completed. Checking pytest.log:"
        ls -la pytest.log
        echo "pytest.log size: $(stat -c%s pytest.log) bytes"

    - name: Check code quality
      run: |
        echo "Checking code quality..."
        poetry run ruff check .
        poetry run mypy warifuri

    - name: Validate files for upload
      run: |
        echo "Validating files for upload..."
        echo "Current working directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Checking specific files:"
        ls -la validate_output.txt pytest.log || echo "Files not found"
        [ -f validate_output.txt ] && echo "‚úì validate_output.txt exists ($(stat -c%s validate_output.txt) bytes)"
        [ -f pytest.log ] && echo "‚úì pytest.log exists ($(stat -c%s pytest.log) bytes)"
        if [ ! -f validate_output.txt ]; then
          echo "‚ùå validate_output.txt is missing"
          echo "Searching for validate_output.txt in subdirectories:"
          find . -name "validate_output.txt" -type f 2>/dev/null || echo "No validate_output.txt found"
        fi
        if [ ! -f pytest.log ]; then
          echo "‚ùå pytest.log is missing"
          echo "Searching for pytest.log in subdirectories:"
          find . -name "pytest.log" -type f 2>/dev/null || echo "No pytest.log found"
          echo "Searching for any pytest output files:"
          find . -name "*pytest*" -type f 2>/dev/null || echo "No pytest files found"
        fi
        if [ ! -f validate_output.txt ] || [ ! -f pytest.log ]; then
          echo "Files are missing. Cannot proceed with upload."
          exit 1
        fi
        echo "All files validated successfully for upload"

    - name: Upload validation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: warifuri-validation-results
        path: |
          validate_output.txt
          pytest.log
        if-no-files-found: warn
        retention-days: 30

  auto-merge:
    name: Auto-merge if conditions are met
    runs-on: ubuntu-latest
    needs: validate-warifuri
    if: |
      github.event_name == 'pull_request' &&
      needs.validate-warifuri.outputs.has-auto-merge == 'true' &&
      needs.validate-warifuri.outputs.validation-passed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get PR information
      id: pr-info
      run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "pr-title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
        echo "pr-author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT

    - name: Add auto-merge label
      run: |
        gh pr edit ${{ steps.pr-info.outputs.pr-number }} --add-label "auto-merge"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add comment explaining auto-merge
      run: |
        gh pr comment ${{ steps.pr-info.outputs.pr-number }} --body "ü§ñ **Auto-merge triggered**

        This PR contains tasks with \`auto_merge.yaml\` files and has passed all validation checks:

        ‚úÖ warifuri workspace validation
        ‚úÖ Test suite execution
        ‚úÖ Code quality checks

        The PR will be automatically merged once all required checks pass."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Enable auto-merge
      run: |
        gh pr merge ${{ steps.pr-info.outputs.pr-number }} --auto --squash --delete-branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manual-merge-check:
    name: Check manual merge eligibility
    runs-on: ubuntu-latest
    needs: validate-warifuri
    if: |
      github.event_name == 'workflow_dispatch' ||
      (needs.validate-warifuri.outputs.has-auto-merge == 'false' &&
       needs.validate-warifuri.outputs.validation-passed == 'true')

    steps:
    - name: Manual merge notification
      run: |
        if [ "${{ needs.validate-warifuri.outputs.has-auto-merge }}" = "false" ]; then
          echo "üìã **Manual review required**"
          echo ""
          echo "This PR does not contain auto_merge.yaml files."
          echo "While validation passed, manual review and merge is required."
        else
          echo "üîç **Manual merge check requested**"
          echo ""
          echo "Workflow triggered manually for PR #${{ github.event.inputs.pr_number }}"
        fi
