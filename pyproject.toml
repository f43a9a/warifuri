[build-system]
requires = ["poetry-core>=1.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "warifuri"
version = "0.2.0"
description = "Task automation with cross-project dependency resolution"
authors = ["f43a9a"]
readme = "README.md"
packages = [{include = "warifuri", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
PyYAML = ">=6.0"
gitpython = ">=3.1.0"
requests = ">=2.28.0"
flask = ">=2.0.0"
click = ">=8.0.0"
jsonschema = ">=4.0.0"

[tool.poetry.scripts]
warifuri = "warifuri.__main__:main"

[tool.poetry.group.dev.dependencies]
mypy = "*"
ruff = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-mock = "*"
vulture = "*"
radon = "*"
bandit = "*"
safety = "*"
nox = "*"
types-PyYAML = "*"
types-requests = "*"
types-jsonschema = "*"
hypothesis = "^6.131.31"
mutmut = "^3.3.0"
snapshottest = "^0.6.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.3.0"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false
strict_equality = true
exclude = [
  "tests/.*",
  "scripts/.*",
  ".*_test\\.py$",
]

[[tool.mypy.overrides]]
module = ["git.*", "flask.*", "requests.*", "pytest.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [".git", "__pycache__", "build", "dist"]

[tool.ruff.lint]
select = ["F", "B", "E", "W"]
ignore = ["E203", "E501", "C901"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "--color=yes"

[tool.hypothesis]
# Property-based testing configuration
max_examples = 50  # Default number of examples to generate
deadline = 10000   # 10 seconds per test case
suppress_health_check = ["too_slow"]  # Allow longer running tests
database = ".hypothesis/examples"

[tool.vulture]
# デッドコード検出設定
paths = ["src", "tests"]
exclude = [
    "*/migrations/*",
    "*/tests/test_*",
    "*/__pycache__/*"
]
min_confidence = 70
ignore_decorators = ["@pytest.fixture", "@click.command", "@click.option"]
ignore_names = ["unused_*", "_*"]

[tool.radon]
# 複雑度測定設定
show = "mi"  # Maintainability Index
min = "B"    # B以上の品質を要求
max = "F"    # F以下は警告
exclude = ["tests/*", "*/migrations/*"]

[tool.bandit]
# セキュリティチェック設定
exclude_dirs = ["tests", "scripts"]
skips = [
    "B101",  # assert文の使用を許可
    "B602",  # subprocess with shell=False - safe for controlled commands
    "B603",  # subprocess with partial paths - acceptable for CLI tools
    "B404",  # subprocess module usage - expected in task execution
    "B606",  # starting process without shell - safe practice
    "B607",  # partial executable path - acceptable for CLI tools
]

[tool.mutmut]
# Mutation testing configuration
paths_to_mutate = ["src/warifuri"]
backup = false
runner = "python -m pytest tests/unit --tb=no -q --disable-warnings"
tests_dir = "tests/unit"
dict_synonyms = ["Mapping", "MutableMapping"]
