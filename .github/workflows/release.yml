name: Release warifuri

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format vX.Y.Z (e.g., v1.0.0)"
          exit 1
        fi

  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        poetry version "$VERSION_NUMBER"
        echo "Updated version to $VERSION_NUMBER"
    
    - name: Run full test suite
      run: |
        poetry run pytest tests/ -v --cov=warifuri
    
    - name: Build package
      run: |
        poetry build
        ls -la dist/
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        warifuri --version
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-dist
        path: dist/

  create-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        echo "Generating changelog for $VERSION..."
        
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "Changes since $PREV_TAG:" > changelog.md
          git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD >> changelog.md
        else
          echo "Initial release" > changelog.md
          echo "- Complete warifuri implementation" >> changelog.md
          echo "- Task allocation between humans, AI, and machines" >> changelog.md
          echo "- GitHub integration and auto-merge workflows" >> changelog.md
        fi
        
        echo "Generated changelog:"
        cat changelog.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: warifuri ${{ needs.prepare-release.outputs.version }}
        body_path: changelog.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, create-release]
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
    
    - name: Publish to PyPI
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
        poetry publish --no-build
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

  update-documentation:
    name: Update documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update README with new version
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        
        # Update installation instructions in README
        sed -i "s/warifuri==.*/warifuri==$VERSION_NUMBER/" README.md
        
        echo "Updated README.md with version $VERSION_NUMBER"
    
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "docs: update version to ${{ needs.prepare-release.outputs.version }}"
        git push
