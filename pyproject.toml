[build-system]
requires = ["poetry-core>=1.0"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
# Ignore common LOW severity warnings that are not actual security issues
skips = ["B101", "B102", "B404", "B603", "B606", "B607"]
# B101: assert_used - allow assert statements in tests
# B102: exec_used - allow exec in controlled contexts
# B404: blacklist - subprocess module usage is safe in controlled contexts
# B603: subprocess_without_shell_equals_true - subprocess calls are safe when input is controlled
# B606: start_process_with_no_shell - process execution is safe with controlled input
# B607: start_process_with_partial_path - safe when using known executables
# B607: start_process_with_partial_path - safe when using known executablespoetry.core.masonry.api"

[tool.poetry]
name = "warifuri"
version = "0.2.0"
description = "Warifuri CLI - A task management and automation tool"
authors = ["f43a9a"]
readme = "README.md"
packages = [{include = "warifuri", from = "src"}]

[tool.poetry.scripts]
warifuri = "warifuri.cli.main:cli"

[tool.poetry.dependencies]
python = "^3.11"
PyYAML = ">=6.0"
gitpython = ">=3.1.0"
requests = ">=2.28.0"
flask = ">=2.0.0"
jsonschema = ">=4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "*"
mypy = "^1.0.0"
ruff = "^0.1.0"
black = ">=24.3.0"
pre-commit = "^3.0.0"
types-PyYAML = "*"
types-jsonschema = "*"
snapshottest = "^0.6.0"
hypothesis = "^6.0.0"
pytest-asyncio = "^0.21.0"

[tool.poetry.group.docs.dependencies]
sphinx = ">=5.0.0"
sphinx-rtd-theme = ">=1.0.0"
sphinx-autodoc-typehints = ">=1.19.0"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false
strict_equality = true
exclude = [
  "tests/.*",
  "scripts/.*",
  ".*_test\\.py$",
]

[[tool.mypy.overrides]]
module = ["git.*", "flask.*", "requests.*", "pytest.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [".git", "__pycache__", "build", "dist"]

[tool.ruff.lint]
select = ["F", "B", "E", "W"]
ignore = ["E203", "E501", "C901"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "--color=yes"
