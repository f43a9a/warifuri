name: Deploy warifuri tasks

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: development
      project_filter:
        description: 'Filter by project name (optional)'
        required: false
        type: string
      dry_run:
        description: 'Perform dry run only'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  actions: write

jobs:
  deploy-warifuri-tasks:
    name: Deploy warifuri tasks
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Validate workspace
      run: |
        echo "üîç Validating warifuri workspace..."
        poetry run warifuri validate --workspace workspace

    - name: List ready tasks
      id: list-tasks
      run: |
        echo "üìã Listing ready tasks..."
        if [ -n "${{ github.event.inputs.project_filter }}" ]; then
          FILTER_ARGS="--project ${{ github.event.inputs.project_filter }}"
        else
          FILTER_ARGS=""
        fi

        READY_TASKS=$(poetry run warifuri list --ready $FILTER_ARGS --format json)
        echo "ready-tasks<<EOF" >> $GITHUB_OUTPUT
        echo "$READY_TASKS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        TASK_COUNT=$(echo "$READY_TASKS" | jq length)
        echo "task-count=$TASK_COUNT" >> $GITHUB_OUTPUT
        echo "Found $TASK_COUNT ready tasks"

    - name: Execute machine tasks
      if: steps.list-tasks.outputs.task-count > 0
      run: |
        echo "ü§ñ Executing machine tasks..."

        DRY_RUN_FLAG=""
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          DRY_RUN_FLAG="--dry-run"
          echo "üß™ Running in DRY RUN mode"
        fi

        # Get machine tasks only
        MACHINE_TASKS=$(echo '${{ steps.list-tasks.outputs.ready-tasks }}' | jq -r '.[] | select(.type == "machine") | .name')

        for task in $MACHINE_TASKS; do
          echo "Executing machine task: $task"
          poetry run warifuri run --task "$task" $DRY_RUN_FLAG
        done

    - name: Execute AI tasks
      if: steps.list-tasks.outputs.task-count > 0
      run: |
        echo "üß† Executing AI tasks..."

        DRY_RUN_FLAG=""
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          DRY_RUN_FLAG="--dry-run"
          echo "üß™ Running in DRY RUN mode"
        fi

        # Get AI tasks only
        AI_TASKS=$(echo '${{ steps.list-tasks.outputs.ready-tasks }}' | jq -r '.[] | select(.type == "ai") | .name')

        for task in $AI_TASKS; do
          echo "Executing AI task: $task"
          poetry run warifuri run --task "$task" $DRY_RUN_FLAG
        done
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    - name: Generate deployment report
      if: always()
      run: |
        echo "üìä Generating deployment report..."

        # Create deployment report
        cat > deployment_report.md << EOF
        # Warifuri Deployment Report

        **Environment**: ${{ github.event.inputs.environment }}
        **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Dry Run**: ${{ github.event.inputs.dry_run }}
        **Project Filter**: ${{ github.event.inputs.project_filter || 'None' }}

        ## Task Execution Summary

        **Total Ready Tasks**: ${{ steps.list-tasks.outputs.task-count }}

        ### Executed Tasks
        EOF

        # Add executed task details
        if [ -f "logs/deployment.log" ]; then
          echo "Deployment log found, adding details..."
          echo "" >> deployment_report.md
          echo '```' >> deployment_report.md
          cat logs/deployment.log >> deployment_report.md
          echo '```' >> deployment_report.md
        fi

        echo "Deployment report generated"
        cat deployment_report.md

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: deployment-report-${{ github.event.inputs.environment }}
        path: |
          deployment_report.md
          logs/
          workspace/projects/*/logs/
          workspace/projects/*/output/

  notify-deployment:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy-warifuri-tasks
    if: always()

    steps:
    - name: Notify success
      if: needs.deploy-warifuri-tasks.result == 'success'
      run: |
        echo "‚úÖ Deployment completed successfully"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Dry Run: ${{ github.event.inputs.dry_run }}"

    - name: Notify failure
      if: needs.deploy-warifuri-tasks.result == 'failure'
      run: |
        echo "‚ùå Deployment failed"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Check the deployment logs for details"
